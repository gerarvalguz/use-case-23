> taking the project you helped me with, please help me with the following instructions:
o	Add a button that, on click, will perform synthetic data generation.
o	Perform synthetic data generation. Make sure to generate dependencies between generated datasets. Make sure to generate 100+ entries for each dataset.
o	Save synthetic data to two separate CSV files using recommended library.
o	Copy synthetized files and any synthetic data generation source code files (if any) to your repository. Make sure to add these files to the version control.
 Consider:
•	Produce a code to generate two linked datasets with synthetic data, 100+ entries each.
•	Store generated test data in separate files in CSV format.
•	The generated test data represents an arbitrary dataset of movies, series, and credits related to them.
•	The generated test data should consist of two relations with the next structure and relationships:

>titles.id numeric title identifier
titles.title textual movie (series) name
titles.description textual title description
titles.release_year should have a Common Era year format
titles.age_certification should be one of these: G, PG, PG-13, R, NC-17, U, U/A, A, S, AL, 6, 9, 12, 12A, 15, 18, 18R, R18, R21, M, MA15+, R16, R18+, X18, T, E, E10+, EC, C, CA, GP, M/PG, TV-Y, TV-Y7, TV-G, TV-PG, TV-14, TV-MA
titles.runtime should be a common title duration in minutes
titles.genres should contain a list of strings representing various movie (series) genres
titles.production_country should represent a country in ISO 3166-1 Alpha-3 code
titles.seasons should represent the number of seasons for series or be empty for movies
credits.id numeric credits identifier
credits.title_id corresponding title id
credits.real_name full credits member name
credits.character_name corresponding movie (series) character name
credits.role should represent corresponding role and be one of these: Director, Producer, Screenwriter, Actor, Actress, Cinematographer, Film Editor, Production Designer, Costume Designer, Music Composer
•	The generated test data should cover a wide range of scenarios, including positive, negative, and edge cases, to ensure comprehensive testing of the application's functionality.
•	The test data should accurately represent the expected input and output data types, formats, and values, ensuring that it is suitable for validating the application's functionality.
•	The test data should be diverse and include different combinations of inputs, ensuring that the application is tested against a variety of scenarios.


To achieve the tasks you've described, we'll need to modify your React project to incorporate the synthetic data generation functionality, CSV file creation, and saving the generated data. Here's how you can do it:

1. **Create Synthetic Data Generation Code:**
   You can create a new file, let's say `syntheticDataGenerator.js`, in your project's `src` directory. In this file, you'll generate synthetic data using the `faker` library according to the structure and relationships you've described. Here's a simplified example:

   ```javascript
   // syntheticDataGenerator.js
   import faker from 'faker';

   function generateSyntheticData() {
     const data = {
       titles: [],
       credits: [],
     };

     for (let i = 1; i <= 100; i++) {
       const title = {
         id: i,
         // ... generate other title properties using faker
       };
       data.titles.push(title);

       const credit = {
         id: i,
         title_id: i,
         // ... generate other credit properties using faker
       };
       data.credits.push(credit);
     }

     return data;
   }

   export default generateSyntheticData;
   ```

2. **Add Button and Data Generation Functionality:**
   In your `src/App.js` file, you can add a button that triggers the synthetic data generation when clicked:

   ```jsx
   import React, { useState } from 'react';
   import generateSyntheticData from './syntheticDataGenerator';

   function App() {
     const [isGenerating, setIsGenerating] = useState(false);

     const handleGenerateData = () => {
       setIsGenerating(true);
       const syntheticData = generateSyntheticData();
       // Perform further processing or save data to CSV files
       setIsGenerating(false);
     };

     return (
       <div>
         <button onClick={handleGenerateData} disabled={isGenerating}>
           Generate Synthetic Data
         </button>
         {isGenerating && <p>Generating data...</p>}
       </div>
     );
   }

   export default App;
   ```

3. **Save Synthetic Data to CSV:**
   To save the synthetic data to CSV files, you can use the `papaparse` library, which makes CSV parsing and generation easier. Install it using `npm`:

   ```
   npm install papaparse
   ```

   Modify the `handleGenerateData` function in your `App.js` file to save the data to CSV files:

   ```jsx
   import { saveAs } from 'file-saver';
   import Papa from 'papaparse';

   // ...

   const handleGenerateData = () => {
     setIsGenerating(true);
     const syntheticData = generateSyntheticData();

     const titlesCSV = Papa.unparse(syntheticData.titles);
     const creditsCSV = Papa.unparse(syntheticData.credits);

     const titlesBlob = new Blob([titlesCSV], { type: 'text/csv;charset=utf-8;' });
     const creditsBlob = new Blob([creditsCSV], { type: 'text/csv;charset=utf-8;' });

     saveAs(titlesBlob, 'titles.csv');
     saveAs(creditsBlob, 'credits.csv');

     setIsGenerating(false);
   };
   ```

4. **Version Control:**
   Make sure to add the `syntheticDataGenerator.js` file, along with the changes you made to `App.js`, to your version control system (e.g., Git). Commit and push these changes to your repository.

Remember that this example is a starting point, and you may need to adapt it to fit your project structure and requirements more accurately. Additionally, ensure that the data generated meets your specific needs and follows the structure and relationships you've defined.

> in the first point below please describe all properties with faker

Certainly, I'll describe how you can use the `faker` library to generate synthetic data for each property within the `titles` and `credits` objects. Below, I'll provide code snippets illustrating how to generate data for each property based on the descriptions you provided:

```javascript
import faker from 'faker';

function generateSyntheticData() {
  const data = {
    titles: [],
    credits: [],
  };

  for (let i = 1; i <= 100; i++) {
    const title = {
      id: i,
      title: faker.random.words(),  // Generate a random movie/series title
      description: faker.lorem.paragraph(),  // Generate a random description
      release_year: faker.date.past().getFullYear(),  // Generate a random past year
      age_certification: faker.random.arrayElement(['G', 'PG', 'PG-13', 'R', 'NC-17']),  // Random certification
      runtime: faker.random.number({ min: 60, max: 180 }),  // Generate a random runtime in minutes
      genres: [faker.random.word(), faker.random.word()],  // Example: Array of random genres
      production_country: faker.address.countryCode(),  // Generate a random country code (ISO 3166-1 Alpha-3)
      seasons: faker.random.number({ min: 1, max: 10 }),  // Generate a random number of seasons
    };
    data.titles.push(title);

    const credit = {
      id: i,
      title_id: i,
      real_name: faker.name.findName(),  // Generate a random full name
      character_name: faker.random.words(),  // Generate a random character name
      role: faker.random.arrayElement([
        'Director', 'Producer', 'Screenwriter', 'Actor', 'Actress', 
        'Cinematographer', 'Film Editor', 'Production Designer', 
        'Costume Designer', 'Music Composer'
      ]),  // Random role
    };
    data.credits.push(credit);
  }

  return data;
}

export default generateSyntheticData;
```

In the code above, I've used various methods provided by the `faker` library to generate different types of synthetic data for each property. Please note that the data generated by the library is random and should only be used for testing and development purposes.

Remember to customize the generation methods and options according to your needs. Additionally, you can expand on the above example to include other properties or data validation as required by your project.


> in this case you are setting same number in credits.id than credits.title_id, should be different and related to title.id 

You're absolutely right, and I apologize for the confusion. The `credits.id` should indeed be unique and different from `credits.title_id`. Here's the corrected version of the `generateSyntheticData` function with unique IDs for `credits`:

```javascript
import faker from 'faker';

function generateSyntheticData() {
  const data = {
    titles: [],
    credits: [],
  };

  for (let i = 1; i <= 100; i++) {
    const title = {
      id: i,
      title: faker.random.words(),
      description: faker.lorem.paragraph(),
      release_year: faker.date.past().getFullYear(),
      age_certification: faker.random.arrayElement(['G', 'PG', 'PG-13', 'R', 'NC-17']),
      runtime: faker.random.number({ min: 60, max: 180 }),
      genres: [faker.random.word(), faker.random.word()],
      production_country: faker.address.countryCode(),
      seasons: faker.random.number({ min: 1, max: 10 }),
    };
    data.titles.push(title);

    for (let j = 1; j <= 3; j++) { // Generate 3 credits per title
      const credit = {
        id: (i - 1) * 3 + j, // Generate unique ID based on title and credit index
        title_id: i,
        real_name: faker.name.findName(),
        character_name: faker.random.words(),
        role: faker.random.arrayElement([
          'Director', 'Producer', 'Screenwriter', 'Actor', 'Actress', 
          'Cinematographer', 'Film Editor', 'Production Designer', 
          'Costume Designer', 'Music Composer'
        ]),
      };
      data.credits.push(credit);
    }
  }

  return data;
}

export default generateSyntheticData;
```

In this corrected version, each `credit` is associated with a specific `title_id`, and the `id` property for each `credit` is generated to be unique across the entire dataset by considering both the title and the credit index. This ensures that the `credits` have distinct and non-repeating IDs.

> now give me the next line with all strings:
age_certification: faker.random.arrayElement(['G', 'PG', 'PG-13', 'R', 'NC-17']) including: G, PG, PG-13, R, NC-17, U, U/A, A, S, AL, 6, 9, 12, 12A, 15, 18, 18R, R18, R21, M, MA15+, R16, R18+, X18, T, E, E10+, EC, C, CA, GP, M/PG, TV-Y, TV-Y7, TV-G, TV-PG, TV-14, TV-MA

Certainly, here's the line with all the strings you've provided:

```javascript
age_certification: faker.random.arrayElement(['G', 'PG', 'PG-13', 'R', 'NC-17', 'U', 'U/A', 'A', 'S', 'AL', '6', '9', '12', '12A', '15', '18', '18R', 'R18', 'R21', 'M', 'MA15+', 'R16', 'R18+', 'X18', 'T', 'E', 'E10+', 'EC', 'C', 'CA', 'GP', 'M/PG', 'TV-Y', 'TV-Y7', 'TV-G', 'TV-PG', 'TV-14', 'TV-MA'])
```

This line includes all the provided age certification strings.
